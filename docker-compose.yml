version: '3.8'

#=============================================================================
# BrainSAIT Healthcare Platform - UNIFIED Docker Configuration
# Consolidates all deployment scenarios into a single, flexible configuration
# Eliminates conflicts between dev, prod, and base configurations
#=============================================================================

networks:
  brainsait-healthcare-network:
    driver: bridge

volumes:
  # Unified volume naming with environment awareness
  postgres_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-brainsait}_postgres_data
  redis_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-brainsait}_redis_data
  pgadmin_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-brainsait}_pgadmin_data
  backend_cache:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-brainsait}_backend_cache
  frontend_cache:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-brainsait}_frontend_cache

services:
  #---------------------------------------------------------------------------
  # PostgreSQL Database - Unified Configuration
  #---------------------------------------------------------------------------
  db:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-brainsait}-db-${ENVIRONMENT:-dev}
    restart: ${RESTART_POLICY:-unless-stopped}
    environment:
      POSTGRES_USER: ${DB_USER:-brainsait_admin}
      POSTGRES_PASSWORD: ${DB_PASS:-brainsait_healthcare_2025!}
      POSTGRES_DB: ${DB_NAME:-brainsait_healthcare}
      # Arabic locale support for production, fallback for development
      POSTGRES_INITDB_ARGS: >-
        --encoding=UTF8 
        --locale=${DB_LOCALE:-en_US.UTF-8}
        ${ARABIC_SUPPORT:+--lc-collate=ar_SA.UTF-8 --lc-ctype=ar_SA.UTF-8}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # Development data seeding (only in dev profile)
      - ./dev-data:/docker-entrypoint-initdb.d/dev-data:ro
    ports:
      - "${DB_EXTERNAL_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-brainsait_admin} -d ${DB_NAME:-brainsait_healthcare}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - brainsait-healthcare-network
    profiles:
      - dev
      - staging
      - prod

  #---------------------------------------------------------------------------
  # Redis Cache - Unified Configuration
  #---------------------------------------------------------------------------
  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-brainsait}-redis-${ENVIRONMENT:-dev}
    restart: ${RESTART_POLICY:-unless-stopped}
    command: >
      redis-server 
      --appendonly yes 
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - brainsait-healthcare-network
    profiles:
      - dev
      - staging
      - prod

  #---------------------------------------------------------------------------
  # Backend API - Unified Configuration
  #---------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-development}
    container_name: ${COMPOSE_PROJECT_NAME:-brainsait}-backend-${ENVIRONMENT:-dev}
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-brainsait_healthcare}
      - DB_USER=${DB_USER:-brainsait_admin}
      - DB_PASS=${DB_PASS:-brainsait_healthcare_2025!}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - SECRET_KEY=${SECRET_KEY:-brainsait-dev-secret-key-2025}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:3000,http://127.0.0.1:5173}
      
      # Healthcare Integration
      - NPHIES_CLIENT_ID=${NPHIES_CLIENT_ID:-}
      - NPHIES_CLIENT_SECRET=${NPHIES_CLIENT_SECRET:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Logging and Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_REAL_TIME=${ENABLE_REAL_TIME:-true}
    
    ports:
      - "${BACKEND_EXTERNAL_PORT:-8000}:8000"
    
    volumes:
      # Development hot reload (dev profile only)
      - type: ${BACKEND_VOLUME_TYPE:-bind}
        source: ${BACKEND_VOLUME_SOURCE:-./backend}
        target: /app
        read_only: ${BACKEND_VOLUME_READONLY:-false}
      # Cache and logs
      - backend_cache:/app/__pycache__
      - ./backend/logs:/app/logs
    
    command: >
      ${BACKEND_COMMAND:-uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug}
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - brainsait-healthcare-network
    
    profiles:
      - dev
      - staging
      - prod

  #---------------------------------------------------------------------------
  # Frontend Application - Unified Configuration
  #---------------------------------------------------------------------------
  frontend:
    build:
      context: ./oid-portal
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile}
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
        - VITE_ENVIRONMENT=${ENVIRONMENT:-development}
    container_name: ${COMPOSE_PROJECT_NAME:-brainsait}-frontend-${ENVIRONMENT:-dev}
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
      - VITE_DEV_MODE=${VITE_DEV_MODE:-true}
      - VITE_DEBUG=${VITE_DEBUG:-true}
      - PATH=/app/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    
    ports:
      - "${FRONTEND_EXTERNAL_PORT:-5173}:${FRONTEND_INTERNAL_PORT:-80}"
    
    volumes:
      # Development hot reload (dev profile only)
      - type: ${FRONTEND_VOLUME_TYPE:-bind}
        source: ${FRONTEND_VOLUME_SOURCE:-./oid-portal}
        target: /app
        consistency: ${FRONTEND_VOLUME_CONSISTENCY:-cached}
      - /app/node_modules  # Anonymous volume for node_modules
      - frontend_cache:/app/.vite
      # SSL certificates for production
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_INTERNAL_PORT:-80}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - brainsait-healthcare-network
    
    profiles:
      - dev
      - staging
      - prod

  #---------------------------------------------------------------------------
  # pgAdmin - Database Management (Development & Staging)
  #---------------------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-brainsait}-pgadmin-${ENVIRONMENT:-dev}
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@brainsait.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-brainsait123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_EXTERNAL_PORT:-5050}:80"
    networks:
      - brainsait-healthcare-network
    profiles:
      - dev
      - staging

  #---------------------------------------------------------------------------
  # Nginx Load Balancer (Production Only)
  #---------------------------------------------------------------------------
  nginx:
    image: nginx:${NGINX_VERSION:-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-brainsait}-nginx-prod
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - brainsait-healthcare-network
    profiles:
      - prod

#=============================================================================
# ENVIRONMENT-BASED PROFILES
#=============================================================================

# Usage Examples:
# Development:   docker-compose --profile dev up
# Staging:       docker-compose --profile staging up  
# Production:    docker-compose --profile prod up
# Full Stack:    docker-compose --profile dev --profile staging up

#=============================================================================
# UNIFIED CONFIGURATION BENEFITS:
# 
# ✅ Single source of truth for all deployments
# ✅ Environment-specific optimizations via profiles
# ✅ Eliminated database name conflicts (unified to brainsait_healthcare)
# ✅ Flexible service composition
# ✅ Comprehensive health checks and monitoring
# ✅ Arabic locale support for production
# ✅ Development hot reload with production optimizations
# ✅ Consistent networking and security
#=============================================================================
