#!/bin/bash
# BrainSAIT Healthcare Platform Deployment Script
# Generated by Ultrathink Method

set -e

echo "ðŸš€ BrainSAIT Healthcare Platform Deployment"
echo "==========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    echo "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed"
        exit 1
    fi
    print_status "Docker is installed"
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose is not installed"
        exit 1
    fi
    print_status "Docker Compose is installed"
    
    # Check if .env files exist
    if [ ! -f backend/.env ]; then
        print_warning "Backend .env file not found, creating from template..."
        cp backend/.env.example backend/.env 2>/dev/null || echo "# Add your environment variables here" > backend/.env
    fi
    
    if [ ! -f oid-portal/.env ]; then
        print_warning "Frontend .env file not found, creating from template..."
        cp oid-portal/.env.example oid-portal/.env 2>/dev/null || echo "# Add your environment variables here" > oid-portal/.env
    fi
}

# Function to deploy in development mode
deploy_dev() {
    echo ""
    echo "ðŸ“¦ Deploying in DEVELOPMENT mode..."
    
    # Stop existing containers
    docker-compose down
    
    # Build and start containers
    docker-compose up -d --build
    
    # Wait for services to be healthy
    echo "Waiting for services to start..."
    sleep 10
    
    # Check service health
    check_services_dev
}

# Function to deploy in production mode
deploy_prod() {
    echo ""
    echo "ðŸ“¦ Deploying in PRODUCTION mode..."
    
    # Load production environment variables
    if [ -f .env.production ]; then
        export $(cat .env.production | xargs)
    fi
    
    # Stop existing containers
    docker-compose down
    
    # Build and start containers
    docker-compose up -d --build
    
    # Wait for services to be healthy
    echo "Waiting for services to start..."
    sleep 15
    
    # Check service health
    check_services_prod
}

# Function to check service health in dev
check_services_dev() {
    echo ""
    echo "Checking service health..."
    
    # Check backend
    if curl -s http://localhost:8000/health > /dev/null; then
        print_status "Backend API is healthy"
    else
        print_error "Backend API is not responding"
    fi
    
    # Check frontend
    if curl -s http://localhost:4200 > /dev/null; then
        print_status "Frontend is accessible"
    else
        print_error "Frontend is not responding"
    fi
    
    # Check database
    if docker-compose exec -T db pg_isready > /dev/null 2>&1; then
        print_status "Database is ready"
    else
        print_error "Database is not ready"
    fi
}

# Function to check service health in prod
check_services_prod() {
    echo ""
    echo "Checking service health..."
    
    # Check backend
    if curl -s http://localhost:8000/health > /dev/null; then
        print_status "Backend API is healthy"
    else
        print_error "Backend API is not responding"
    fi
    
    # Check frontend
    if curl -s http://localhost > /dev/null; then
        print_status "Frontend is accessible"
    else
        print_error "Frontend is not responding"
    fi
    
    # Check database
    if docker-compose exec -T db pg_isready > /dev/null 2>&1; then
        print_status "Database is ready"
    else
        print_error "Database is not ready"
    fi
    
    # Check Redis
    if docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then
        print_status "Redis is ready"
    else
        print_error "Redis is not ready"
    fi
}

# Function to show logs
show_logs() {
    echo ""
    echo "ðŸ“‹ Showing logs (Ctrl+C to exit)..."
    
    if [ "$1" == "prod" ]; then
        docker-compose logs -f
    else
        docker-compose logs -f
    fi
}

# Function to stop services
stop_services() {
    echo ""
    echo "ðŸ›‘ Stopping services..."
    
    if [ "$1" == "prod" ]; then
        docker-compose down
    else
        docker-compose down
    fi
    
    print_status "Services stopped"
}

# Main script
main() {
    check_prerequisites
    
    # Parse command line arguments
    case "$1" in
        "dev")
            deploy_dev
            echo ""
            echo "âœ… Development deployment complete!"
            echo ""
            echo "Access the application:"
            echo "  Frontend: http://localhost:4200"
            echo "  Backend API: http://localhost:8000"
            echo "  API Docs: http://localhost:8000/docs"
            ;;
        "prod")
            deploy_prod
            echo ""
            echo "âœ… Production deployment complete!"
            echo ""
            echo "Access the application:"
            echo "  Frontend: http://localhost"
            echo "  Backend API: http://localhost:8000"
            echo "  API Docs: http://localhost:8000/docs"
            ;;
        "logs")
            show_logs "$2"
            ;;
        "stop")
            stop_services "$2"
            ;;
        "status")
            if [ "$2" == "prod" ]; then
                check_services_prod
            else
                check_services_dev
            fi
            ;;
        *)
            echo "Usage: $0 {dev|prod|logs|stop|status} [prod]"
            echo ""
            echo "Commands:"
            echo "  dev     - Deploy in development mode"
            echo "  prod    - Deploy in production mode"
            echo "  logs    - Show container logs"
            echo "  stop    - Stop all services"
            echo "  status  - Check service health"
            echo ""
            echo "Examples:"
            echo "  $0 dev          # Deploy development environment"
            echo "  $0 prod         # Deploy production environment"
            echo "  $0 logs         # Show development logs"
            echo "  $0 logs prod    # Show production logs"
            echo "  $0 stop         # Stop development services"
            echo "  $0 stop prod    # Stop production services"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"