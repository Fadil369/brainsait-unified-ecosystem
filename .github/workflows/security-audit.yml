name: 🔒 Security Audit & Vulnerability Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # 🛡️ Dependency Vulnerability Scan
  dependency-scan:
    name: 🛡️ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install safety

      - name: Install Node.js dependencies
        run: |
          cd oid-portal
          npm ci

      - name: Python Security Scan with Safety
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          safety check --full-report > safety-full-report.txt || true

      - name: Node.js Security Audit
        run: |
          cd oid-portal
          npm audit --audit-level moderate --json > npm-audit-report.json || true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-vulnerability-reports
          path: |
            backend/safety-report.json
            backend/safety-full-report.txt
            oid-portal/npm-audit-report.json

  # 🔍 Static Code Analysis
  static-analysis:
    name: 🔍 Static Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security analysis tools
        run: |
          pip install bandit semgrep pylint

      - name: Run Bandit Security Linter
        run: |
          bandit -r backend/ -ll -f json -o bandit-report.json || true
          bandit -r backend/ -ll -f txt -o bandit-report.txt || true

      - name: Run Semgrep Security Analysis
        run: |
          semgrep --config=auto backend/ oid-portal/src/ \
            --json --output=semgrep-report.json \
            --severity=ERROR --severity=WARNING || true

      - name: Run PyLint Security Analysis
        run: |
          cd backend
          pylint --load-plugins=pylint.extensions.security \
            --output-format=json . > pylint-security-report.json || true

      - name: Upload static analysis reports
        uses: actions/upload-artifact@v3
        with:
          name: static-analysis-reports
          path: |
            bandit-report.json
            bandit-report.txt
            semgrep-report.json
            backend/pylint-security-report.json

  # 🚨 SAST - Static Application Security Testing
  sast-scan:
    name: 🚨 SAST - CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        if: matrix.language == 'javascript'

      - name: Manual build for Python
        if: matrix.language == 'python'
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # 🏥 Healthcare Security Compliance
  healthcare-security:
    name: 🏥 Healthcare Security Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install healthcare security tools
        run: |
          pip install -r backend/requirements.txt
          pip install cryptography pycryptodome

      - name: HIPAA Compliance Check
        run: |
          cd backend
          python -c "
          from services.compliance_service import check_hipaa_compliance
          result = check_hipaa_compliance()
          print('HIPAA Compliance:', 'PASSED' if result else 'FAILED')
          assert result, 'HIPAA compliance check failed'
          "

      - name: Data Encryption Validation
        run: |
          cd backend
          python -c "
          from core.database import validate_encryption
          result = validate_encryption()
          print('Data Encryption:', 'PASSED' if result else 'FAILED')
          assert result, 'Data encryption validation failed'
          "

      - name: Audit Log Security Check
        run: |
          cd backend
          python -c "
          from middleware.logging import validate_audit_logs
          result = validate_audit_logs()
          print('Audit Logs Security:', 'PASSED' if result else 'FAILED')
          assert result, 'Audit log security check failed'
          "

      - name: Patient Data Protection Validation
        run: |
          cd backend
          python -c "
          from models.healthcare import validate_patient_data_protection
          result = validate_patient_data_protection()
          print('Patient Data Protection:', 'PASSED' if result else 'FAILED')
          assert result, 'Patient data protection validation failed'
          "

  # 🌐 Web Security Testing
  web-security:
    name: 🌐 Web Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install and build frontend
        run: |
          cd oid-portal
          npm ci
          npm run build

      - name: Start application for testing
        run: |
          cd oid-portal
          npm run preview &
          sleep 10

      - name: Install OWASP ZAP
        run: |
          wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
          tar -xzf ZAP_2.14.0_Linux.tar.gz

      - name: Run ZAP Baseline Scan
        run: |
          ./ZAP_2.14.0/zap.sh -cmd \
            -quickurl http://localhost:4173 \
            -quickout zap-baseline-report.html || true

      - name: Upload ZAP report
        uses: actions/upload-artifact@v3
        with:
          name: zap-security-report
          path: zap-baseline-report.html

  # 🔐 Secrets Scanning
  secrets-scan:
    name: 🔐 Secrets & Credential Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🐳 Container Security Scanning
  container-security:
    name: 🐳 Container Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend Docker image
        run: |
          docker build -f backend/Dockerfile.prod -t brainsait-backend:latest backend/

      - name: Build frontend Docker image
        run: |
          docker build -f oid-portal/Dockerfile.prod -t brainsait-frontend:latest oid-portal/

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'brainsait-backend:latest'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'brainsait-frontend:latest'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt || true

      - name: Upload container security reports
        uses: actions/upload-artifact@v3
        with:
          name: container-security-reports
          path: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif
            docker-bench-results.txt

  # 📊 Security Dashboard
  security-dashboard:
    name: 📊 Security Dashboard & Reporting
    runs-on: ubuntu-latest
    needs: [
      dependency-scan,
      static-analysis,
      healthcare-security,
      web-security,
      secrets-scan,
      container-security
    ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./security-reports

      - name: Set up Python for report generation
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install report generation tools
        run: |
          pip install jinja2 matplotlib pandas

      - name: Generate comprehensive security report
        run: |
          python scripts/generate_security_report.py \
            --input-dir ./security-reports \
            --output security-dashboard.html \
            --format html

      - name: Generate security metrics
        run: |
          python scripts/calculate_security_metrics.py \
            --input-dir ./security-reports \
            --output security-metrics.json

      - name: Upload security dashboard
        uses: actions/upload-artifact@v3
        with:
          name: security-dashboard
          path: |
            security-dashboard.html
            security-metrics.json

      - name: Update security badges
        run: |
          echo "Security Status: $(jq -r '.overall_status' security-metrics.json)" > security-status.txt
          echo "Last Scan: $(date)" >> security-status.txt

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const metrics = JSON.parse(fs.readFileSync('security-metrics.json', 'utf8'));
            
            const comment = `## 🔒 Security Scan Results
            
            | Category | Status | Issues |
            |----------|--------|---------|
            | Dependencies | ${metrics.dependencies.status} | ${metrics.dependencies.issues} |
            | Static Analysis | ${metrics.static_analysis.status} | ${metrics.static_analysis.issues} |
            | Healthcare Compliance | ${metrics.healthcare.status} | ${metrics.healthcare.issues} |
            | Web Security | ${metrics.web_security.status} | ${metrics.web_security.issues} |
            | Secrets Scan | ${metrics.secrets.status} | ${metrics.secrets.issues} |
            | Container Security | ${metrics.containers.status} | ${metrics.containers.issues} |
            
            **Overall Security Status: ${metrics.overall_status}**
            
            [View detailed security dashboard](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # 🚨 Security Alerts
  security-alerts:
    name: 🚨 Security Alerts & Notifications
    runs-on: ubuntu-latest
    needs: [security-dashboard]
    if: failure() || (success() && github.event_name == 'schedule')

    steps:
      - name: Download security metrics
        uses: actions/download-artifact@v3
        with:
          name: security-dashboard
          path: ./

      - name: Check for critical vulnerabilities
        id: critical-check
        run: |
          if [ -f security-metrics.json ]; then
            CRITICAL_COUNT=$(jq -r '.critical_vulnerabilities' security-metrics.json)
            echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "CRITICAL SECURITY ISSUES FOUND: $CRITICAL_COUNT"
              echo "critical_found=true" >> $GITHUB_OUTPUT
            else
              echo "critical_found=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Send Slack notification for critical issues
        if: steps.critical-check.outputs.critical_found == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          title: '🚨 CRITICAL Security Vulnerabilities Detected'
          message: |
            Critical security vulnerabilities found in BrainSAIT Healthcare Platform!
            
            Critical Issues: ${{ steps.critical-check.outputs.critical_count }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            
            Please review immediately: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}

      - name: Create security issue for critical vulnerabilities
        if: steps.critical-check.outputs.critical_found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const title = `🚨 Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `## 🚨 Critical Security Alert
            
            **Critical vulnerabilities have been detected in the BrainSAIT Healthcare Platform.**
            
            ### Details:
            - **Critical Issues**: ${{ steps.critical-check.outputs.critical_count }}
            - **Scan Date**: ${new Date().toISOString()}
            - **Branch**: ${{ github.ref_name }}
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Required Actions:
            1. 🔍 Review the security dashboard immediately
            2. 🛠️ Address critical vulnerabilities within 24 hours
            3. 🧪 Run additional security testing
            4. 📋 Update security documentation
            
            ### Healthcare Compliance Impact:
            Critical security vulnerabilities may impact:
            - HIPAA compliance
            - Patient data protection
            - NPHIES integration security
            - Audit trail integrity
            
            **This issue requires immediate attention from the security team.**
            
            /label security critical healthcare hipaa
            /assign @security-team
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'healthcare', 'hipaa']
            });

# This workflow provides comprehensive security scanning for the healthcare platform
# including HIPAA compliance, vulnerability scanning, and automated alerting
