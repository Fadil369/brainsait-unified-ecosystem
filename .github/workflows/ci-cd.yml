name: BrainSAIT Healthcare Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  lint-and-test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: oid-portal/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install Frontend Dependencies
      working-directory: ./oid-portal
      run: npm ci
      
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Frontend Linting
      working-directory: ./oid-portal
      run: npm run lint
      
    - name: Frontend Testing
      working-directory: ./oid-portal
      run: npm test
      
    - name: Backend Testing
      working-directory: ./backend
      run: pytest
      
    - name: Security Scan
      uses: securecodewarrior/github-action-add-sarif@v1
      if: always()
      with:
        sarif-file: 'security-scan-results.sarif'

  # Build and Test Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: brainsait-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./oid-portal
        push: false
        tags: brainsait-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
    - name: Run API Integration Tests
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1
        
    - name: Run Frontend Tests
      run: |
        curl -f http://localhost:4200 || exit 1
        
    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Health Check
      run: |
        # Wait for deployment to complete
        sleep 60
        # Check if services are healthy
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        
    - name: Notify Deployment Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'üöÄ BrainSAIT Healthcare Platform deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify Deployment Failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: '‚ùå BrainSAIT Healthcare Platform deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}