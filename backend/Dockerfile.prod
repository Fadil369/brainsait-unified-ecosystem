# Production Dockerfile for BrainSAIT Healthcare Platform Backend
# Optimized for Arabic-first healthcare compliance and NPHIES integration

# Multi-stage build for production optimization
FROM python:3.11-slim AS builder

# Set build arguments
ARG ENVIRONMENT=production

# Install system dependencies for healthcare compliance
RUN apt-get update && apt-get install -y \
    curl \
    g++ \
    gcc \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements_unified.txt ./
COPY utils/ ./utils/

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements_unified.txt

# Production stage
FROM python:3.11-slim

# Install runtime dependencies and create user in single layer
RUN apt-get update && apt-get install -y \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && adduser --disabled-password --gecos '' appuser \
    && mkdir -p /app/logs /app/uploads /app/backup \
    && chown -R appuser:appuser /app

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser . .

# Copy security utilities
COPY --chown=appuser:appuser utils/ ./utils/

# Switch to non-root user
USER appuser

# Create necessary directories with proper permissions
RUN mkdir -p logs uploads backup

# Environment variables for production
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Healthcare compliance environment
ENV PDPL_COMPLIANCE=true
ENV HIPAA_COMPLIANCE=true
ENV ARABIC_SUPPORT=true
ENV RTL_ENABLED=true

# Security environment
ENV SECURITY_HEADERS=true
ENV CSRF_PROTECTION=true
ENV AUDIT_LOGGING=true

# Expose port
EXPOSE 8000

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start command optimized for production
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--worker-class", "uvicorn.workers.UvicornWorker"]
